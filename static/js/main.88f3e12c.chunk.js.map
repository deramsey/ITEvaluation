{"version":3,"sources":["Pwd.js","Nt.js","Sec.js","serviceWorker.js","index.js"],"names":["ma_courses","ge_courses","courseAmt","length","n","document","querySelectorAll","r","Clicker","state","number","event","this","setState","type","value","onClick","handleClick","bind","React","Component","MaList","map","ma_course","name","GeList","ge_course","Pwd","id","class","Nt","Sec","Boolean","window","location","hostname","match","MainApp","$","on","toggleClass","ReactDOM","render","StrictMode","placeholder","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88f3e12c.chunk.js","sourcesContent":["import React from 'react';\n/*import logo from './logo.svg';*/\nimport './App.css';\n\nconst ma_courses = [\"CIS-115 - Intro to Prog & Logic\",\n\"CSC-151 - Java Programming\",\n\"CTI-110 - Web, Pgm, & Db Foundation\",\n\"CTI-120 - Network & Sec Foundation\",\n\"CTS-115 - Info Systems Business Concepts\",\n\"CTS-120 - Hardware/Software Support\",\n\"DBA-110 - Database Concepts\",\n\"NET-125 - Introduction to Networks\",\n\"NOS-110 - Operating Systems ConceptsFall\",\n\"NOS-120 - Linux/UNIX Single User\",\n\"WEB-115 - Web Markup and Scripting\",\n\"WEB-140 - Web Development Tools\",\n\"WEB-210 - Web Design\",\n\"WEB-214 - Social Media\",\n\"WEB-225 - Content Management Sys\",\n\"WEB-285 - Emerging Web Technologies\",\n\"WEB-287 - Web E-Portfolio\"];\n\nconst ge_courses = [\n\"ACA-115 - Success and Study Skills\",\n\"COM-120 - Intro Interpersonal Com\",\n\"ENG-111 - Writing and Inquiry\",\n\"HUM-115 - Critical Thinking\",\n\"SOC-210 - Introduction to Sociology\",\n\"MAT-121 - Algebra/Trigonometry (MAT 121 or higher)\"\n]\n\nconst courseAmt = ma_courses.length + ge_courses.length;\nvar n = document.querySelectorAll(\"#Pwd input[type='checkbox']:checked\").length;\nvar r = courseAmt - n;\n\nclass Clicker extends React.Component{\n\nconstructor() {\n    super();\n    this.state = {\n        number: r\n    }\n}\n\nhandleClick(event) {\n   this.setState({number: courseAmt - document.querySelectorAll(\"#Pwd input[type='checkbox']:checked\").length}); \n}\n\n\n   render(){\n       return(\n        <b>Remaining Courses: {this.state.number} <input type=\"button\" value=\"Update\" onClick={this.handleClick.bind(this)} /></b>\n   )\n\n }\n}\n\nfunction MaList() {\n\n return(\n   <div>\n     <h3>Program Major Courses</h3>\n     <ul>\n     {ma_courses.map( ma_course => (\n       <li>\n         <input type=\"checkbox\" value=\"ma_check\" name=\"ma_check\" /><span>{ma_course} </span>\n       </li>\n     ))}\n     </ul>\n   </div>\n )\n}\n\nfunction GeList() {\n\n  return(\n    <div>\n      <h3>General Education Courses</h3>\n      <ul>\n      {ge_courses.map( ge_course => (\n        <li>\n          <input type=\"checkbox\" value=\"ge_check\" name=\"ge_check\" /><span>{ge_course} </span>\n        </li>\n      ))}\n      </ul>\n    </div>\n  )\n }\n\n\n\nfunction Pwd() {\n  return (\n    \n    <div id=\"Pwd\" class=\"hidden\">\n      <h2>AAS Programming and Web Development</h2>\n     <MaList />\n     <GeList />\n     <b>Total Courses: {courseAmt}</b><br />\n     <Clicker />\n    </div>\n  );\n}\n\nexport default Pwd;\n","import React from 'react';\n/*import logo from './logo.svg';*/\nimport './App.css';\n\nconst ma_courses = [\"CIS-115 - Intro to Prog & Logic\",\n\"CTI-110 - Web, Pgm, & Db Foundation\",\n\"CTI-120 - Network & Sec Foundation\t\",\n\"CTS-115 - Info Systems Business Concepts\",\n\"CTS-120 - Hardware/Software Support\",\n\"CTS-217 - Computer Train/Support\",\n\"CTS-220 - Adv Hard/Software Support\",\n\"NET-125 - Introduction to Networks\",\n\"NET-126 - Routing Basics\",\n\"NET-225 - Routing & Switching I\",\n\"NET-226 - Routing & Switching II\",\n\"NOS-110 - Operating Systems Concepts\",\n\"NOS-120 - Linux/UNIX Single User\",\n\"NOS-230 - Windows Admin I\",\n\"SEC-110 - Security Concepts\",\n\"SEC-150 - Secure Communications\",\n\"WEB-287 - Web E-Portfolio\"];\n\nconst ge_courses = [\n\"ACA-115 - Success and Study Skills\",\n\"COM-120 - Intro Interpersonal Com\",\n\"ENG-111 - Writing and Inquiry\",\n\"HUM-115 - Critical Thinking\",\n\"SOC-210 - Introduction to Sociology\",\n\"MAT-121 - Algebra/Trigonometry (MAT 121 or higher)\"\n]\n\nconst courseAmt = ma_courses.length + ge_courses.length;\nvar n = document.querySelectorAll(\"#Nt input[type='checkbox']:checked\").length;\nvar r = courseAmt - n;\n\nclass Clicker extends React.Component{\n\nconstructor() {\n    super();\n    this.state = {\n        number: r\n    }\n}\n\nhandleClick(event) {\n   this.setState({number: courseAmt - document.querySelectorAll(\"#Nt input[type='checkbox']:checked\").length}); \n}\n\n\n   render(){\n       return(\n        <b>Remaining Courses: {this.state.number} <input type=\"button\" value=\"Update\" onClick={this.handleClick.bind(this)} /></b>\n   )\n\n }\n}\n\nfunction MaList() {\n\n return(\n   <div>\n     <h3>Program Major Courses</h3>\n     <ul>\n     {ma_courses.map( ma_course => (\n       <li>\n         <input type=\"checkbox\" value=\"ma_check\" name=\"ma_check\" /><span>{ma_course} </span>\n       </li>\n     ))}\n     </ul>\n   </div>\n )\n}\n\nfunction GeList() {\n\n  return(\n    <div>\n      <h3>General Education Courses</h3>\n      <ul>\n      {ge_courses.map( ge_course => (\n        <li>\n          <input type=\"checkbox\" value=\"ge_check\" name=\"ge_check\" /><span>{ge_course} </span>\n        </li>\n      ))}\n      </ul>\n    </div>\n  )\n }\n\n\n\nfunction Nt() {\n  return (\n    \n    <div id=\"Nt\" class=\"hidden\">\n      <h2>AAS Networking Technology</h2>\n     <MaList />\n     <GeList />\n     <b>Total Courses: {courseAmt}</b><br />\n     <Clicker />\n    </div>\n  );\n}\n\nexport default Nt;\n","import React from 'react';\n/*import logo from './logo.svg';*/\nimport './App.css';\n\nconst ma_courses = [\"CTI-110 - Web, Pgm, & Db Foundation\",\n\"CTI-120 - Network & Sec Foundation\",\n\"CTI-140 - Virtualization Concepts\",\n\"CTS-115 - Info Systems Business Concepts\",\n\"CTS-120 - Hardware/Software Support\",\n\"CTS-217 - Computer Train/Support\",\n\"NET-125 - Introduction to Networks\",\n\"NET-126 - Routing Basics\",\n\"NOS-110 - Operating Systems Concepts\",\n\"NOS-120 - Linux/UNIX Single User\",\n\"NOS-230 - Windows Admin I\",\n\"SEC-110 - Security Concepts\",\n\"SEC-150 - Secure Communications\",\n\"SEC-160 - Secure Admin I\",\n\"SEC-210 - Intrusion Detection\",\n\"SEC-260 - Security Admin II\",\n\"WEB-287 - Web E-Portfolio\"];\n\nconst ge_courses = [\n\"ACA-115 - Success and Study Skills\",\n\"COM-120 - Intro Interpersonal Com\",\n\"ENG-111 - Writing and Inquiry\",\n\"HUM-115 - Critical Thinking\",\n\"SOC-210 - Introduction to Sociology\",\n\"MAT-121 - Algebra/Trigonometry (MAT 121 or higher)\"\n]\n\nconst courseAmt = ma_courses.length + ge_courses.length;\nvar n = document.querySelectorAll(\"#Sec input[type='checkbox']:checked\").length;\nvar r = courseAmt - n;\n\nclass Clicker extends React.Component{\n\nconstructor() {\n    super();\n    this.state = {\n        number: r\n    }\n}\n\nhandleClick(event) {\n   this.setState({number: courseAmt - document.querySelectorAll(\"#Sec input[type='checkbox']:checked\").length}); \n}\n\n\n   render(){\n       return(\n        <b>Remaining Courses: {this.state.number} <input type=\"button\" value=\"Update\" onClick={this.handleClick.bind(this)} /></b>\n   )\n\n }\n}\n\nfunction MaList() {\n\n return(\n   <div>\n     <h3>Program Major Courses</h3>\n     <ul>\n     {ma_courses.map( ma_course => (\n       <li>\n         <input type=\"checkbox\" value=\"ma_check\" name=\"ma_check\" /><span>{ma_course} </span>\n       </li>\n     ))}\n     </ul>\n   </div>\n )\n}\n\nfunction GeList() {\n\n  return(\n    <div>\n      <h3>General Education Courses</h3>\n      <ul>\n      {ge_courses.map( ge_course => (\n        <li>\n          <input type=\"checkbox\" value=\"ge_check\" name=\"ge_check\" /><span>{ge_course} </span>\n        </li>\n      ))}\n      </ul>\n    </div>\n  )\n }\n\n\n\nfunction Sec() {\n  return (\n    \n    <div id=\"Sec\" class=\"hidden\">\n      <h2>AAS Systems Security</h2>\n     <MaList />\n     <GeList />\n    <b>Total Courses: {courseAmt}</b><br />\n    <Clicker />\n    </div>\n  );\n}\n\nexport default Sec;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pwd from './Pwd';\nimport Nt from './Nt';\nimport Sec from './Sec';\nimport $ from \"jquery\";\nimport * as serviceWorker from './serviceWorker';\n\n\n\nclass MainApp extends React.Component {\n\n    componentDidMount() {\n      \n      $(\"#bnt\").on(\"click\", function(){\n        $(\"#Nt\").toggleClass(\"hidden\");\n      })\n\n      $(\"#bpwd\").on(\"click\", function(){\n        $(\"#Pwd\").toggleClass(\"hidden\");\n      })\n\n      $(\"#bsec\").on(\"click\", function(){\n        $(\"#Sec\").toggleClass(\"hidden\");\n      })\n\n    }\n\n  render() {\n\n\n    return(\n      \n      <div>\n      <div id=\"buttons\">\n        <button id=\"bnt\">AAS Networking Technology</button>\n        <button id=\"bpwd\">AAS Programming & Web Development</button>\n        <button id=\"bsec\">AAS Systems Security</button>\n      </div>\n      \n        <Nt />\n      \n        <Pwd />\n\n        <Sec />\n        \n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n\n    <React.StrictMode>\n    <main>\n    <h1>CCC IT Degree Evaluation</h1>\n    <input type=\"text\" name=\"sname\" placeholder=\"Student Name\" id=\"sname\" />\n    <MainApp />\n    </main>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}